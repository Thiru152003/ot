# Default values for opentelemetry-collector.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""

# Valid values are "daemonset", "deployment", and "statefulset".
mode: "deployment"

# Specify which namespace should be used to deploy the resources into
namespaceOverride: ""

# Handles basic configuration of components that
# also require k8s modifications to work correctly.
presets:
  # Configures the collector to collect logs.
  logsCollection:
    enabled: false
    includeCollectorLogs: false
    storeCheckpoints: false
    maxRecombineLogSize: 102400

  # Configures the collector to collect host metrics.
  hostMetrics:
    enabled: false

  # Configures the Kubernetes Processor to add Kubernetes metadata.
  kubernetesAttributes:
    enabled: false
    extractAllPodLabels: false
    extractAllPodAnnotations: false

  # Configures the collector to collect node, pod, and container metrics from the API server on a kubelet.
  kubeletMetrics:
    enabled: false

  # Configures the collector to collect kubernetes events.
  kubernetesEvents:
    enabled: false

  # Configures the Kubernetes Cluster Receiver to collect cluster-level metrics.
  clusterMetrics:
    enabled: false

configMap:
  create: true
  existingName: ""

internalTelemetryViaOTLP:
  endpoint: ""
  headers: []
  traces:
    enabled: false
    endpoint: ""
    headers: []
  metrics:
    enabled: false
    endpoint: ""
    headers: []
  logs:
    enabled: false
    endpoint: ""
    headers: []

config:
  exporters:
    debug: {}
  extensions:
    health_check:
      endpoint: ${env:MY_POD_IP}:13133
  processors:
    batch: {}
    memory_limiter:
      check_interval: 5s
      limit_percentage: 80
      spike_limit_percentage: 25
  receivers:
    jaeger:
      protocols:
        grpc:
          endpoint: ${env:MY_POD_IP}:14250
        thrift_http:
          endpoint: ${env:MY_POD_IP}:14268
        thrift_compact:
          endpoint: ${env:MY_POD_IP}:6831
    otlp:
      protocols:
        grpc:
          endpoint: ${env:MY_POD_IP}:4317
        http:
          endpoint: ${env:MY_POD_IP}:4318
    prometheus:
      config:
        scrape_configs:
        - job_name: opentelemetry-collector
          scrape_interval: 10s
          static_configs:
          - targets:
            - ${env:MY_POD_IP}:8888
    zipkin:
      endpoint: ${env:MY_POD_IP}:9411
  service:
    telemetry:
      metrics:
        readers:
        - pull:
            exporter:
              prometheus:
                host: ${env:MY_POD_IP}
                port: 8888
    extensions:
    - health_check
    pipelines:
      logs:
        exporters:
        - debug
        processors:
        - memory_limiter
        - batch
        receivers:
        - otlp
      metrics:
        exporters:
        - debug
        processors:
        - memory_limiter
        - batch
        receivers:
        - otlp
        - prometheus
      traces:
        exporters:
        - debug
        processors:
        - memory_limiter
        - batch
        receivers:
        - otlp
        - jaeger
        - zipkin

alternateConfig: {}

image:
  repository: "otel/opentelemetry-collector"
  pullPolicy: IfNotPresent
  tag: ""
  digest: ""
imagePullSecrets: []

command:
  name: "otelcol"
  extraArgs: []

serviceAccount:
  create: true
  annotations: {}
  name: ""

clusterRole:
  create: true
  name: ""
  annotations: {}
  rules: []
  clusterRoleBinding:
    name: otel-collector-binding
  # Removed binding as it's not allowed in the schema

podSecurityContext: {}
securityContext: {}

nodeSelector: {}
tolerations: []
affinity: {}
topologySpreadConstraints: []

priorityClassName: ""

extraEnvs: []
extraEnvsFrom: []
extraVolumes: []
extraVolumeMounts: []
extraManifests: []

ports:
  otlp:
    enabled: true
    containerPort: 4317
    servicePort: 4317
    hostPort: 4317
    protocol: TCP
    appProtocol: grpc
  otlp-http:
    enabled: true
    containerPort: 4318
    servicePort: 4318
    hostPort: 4318
    protocol: TCP
  jaeger-compact:
    enabled: true
    containerPort: 6831
    servicePort: 6831
    hostPort: 6831
    protocol: UDP
  jaeger-thrift:
    enabled: true
    containerPort: 14268
    servicePort: 14268
    hostPort: 14268
    protocol: TCP
  jaeger-grpc:
    enabled: true
    containerPort: 14250
    servicePort: 14250
    hostPort: 14250
    protocol: TCP
  zipkin:
    enabled: true
    containerPort: 9411
    servicePort: 9411
    hostPort: 9411
    protocol: TCP
  metrics:
    enabled: false
    containerPort: 8888
    servicePort: 8888
    protocol: TCP

useGOMEMLIMIT: true

resources: {}

podAnnotations: {}
podLabels: {}
additionalLabels: {}

hostNetwork: false
hostAliases: []
dnsPolicy: ""
dnsConfig: {}
schedulerName: ""

replicaCount: 1
revisionHistoryLimit: 10

annotations: {}

extraContainers: []
initContainers: []

lifecycleHooks: {}

livenessProbe:
  httpGet:
    port: 13133
    path: /

readinessProbe:
  httpGet:
    port: 13133
    path: /

startupProbe: {}

service:
  type: ClusterIP
  annotations: {}

ingress:
  enabled: false
  additionalIngresses: []

podMonitor:
  enabled: false
  metricsEndpoints:
  - port: metrics
  extraLabels: {}

serviceMonitor:
  enabled: false
  metricsEndpoints:
  - port: metrics
  extraLabels: {}
  relabelings: []
  metricRelabelings: []

podDisruptionBudget:
  enabled: false

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  behavior: {}
  targetCPUUtilizationPercentage: 80

rollout:
  strategy: RollingUpdate

prometheusRule:
  enabled: false
  groups: []
  defaultRules:
    enabled: false
  extraLabels: {}

statefulset:
  volumeClaimTemplates: []
  podManagementPolicy: "Parallel"
  persistentVolumeClaimRetentionPolicy:
    enabled: false
    whenDeleted: Retain
    whenScaled: Retain

networkPolicy:
  enabled: false
  annotations: {}
  allowIngressFrom: []
  extraIngressRules: []
  egressRules: []

shareProcessNamespace: false
